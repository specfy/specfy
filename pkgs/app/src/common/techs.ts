import {
  SiApachecassandra,
  SiAmazondynamodb,
  SiInfluxdb,
  SiCouchbase,
  SiMariadb,
  SiFirebase,
  SiExpo,
  SiRender,
  SiPlatformdotsh,
  SiMysql,
  SiElasticstack,
  SiHeroku,
  SiDocker,
  SiJavascript,
  SiJirasoftware,
  SiGithub,
  SiSlack,
  SiMongodb,
  SiElasticcloud,
  SiZapier,
  SiZoom,
  SiMailchimp,
  SiNetlify,
  SiNewrelic,
  SiDigitalocean,
  SiOracle,
  SiAlibabacloud,
  SiVercel,
  SiOvh,
  SiAmazonaws,
  SiElixir,
  SiSwift,
  SiDart,
  SiRuby,
  SiKotlin,
  SiPowershell,
  SiC,
  SiHtml5,
  SiPython,
  SiRust,
  SiCplusplus,
  SiGo,
  SiPhp,
  SiMicrosoftazure,
  SiEslint,
  SiPingdom,
  SiPostgresql,
  SiRedis,
  SiRabbitmq,
  SiSentry,
  SiDatadog,
  SiAlgolia,
  SiElasticsearch,
  SiKubernetes,
  SiGooglecloud,
  SiTypescript,
  SiReact,
  SiWebpack,
  SiNodedotjs,
  SiGnubash,
  SiCss3,
} from '@icons-pack/react-simple-icons';
import type { IconType } from '@icons-pack/react-simple-icons/types';
import type { ApiComponent } from '@specfy/api/src/types/api';
import type { AllowedKeys, TechItem } from '@specfy/stack-analyser';
import { listTech } from '@specfy/stack-analyser/dist/common/techs.generated';

type Extending = {
  Icon?: IconType;
  regHostname?: RegExp;
};
export type TechInfo = Extending & TechItem;

const extending: Partial<Record<AllowedKeys, Extending>> = {
  algolia: { Icon: SiAlgolia },
  alibabacloud: { Icon: SiAlibabacloud },
  'aws.dynamodb': { Icon: SiAmazondynamodb },
  aws: { Icon: SiAmazonaws, regHostname: /aws.amazon.com$/ },
  'aws.s3': { Icon: SiAmazonaws },
  azure: { Icon: SiMicrosoftazure },
  bash: { Icon: SiGnubash },
  c: { Icon: SiC },
  cassandra: { Icon: SiApachecassandra },
  couchbase: { Icon: SiCouchbase },
  cplusplus: { Icon: SiCplusplus },
  css: { Icon: SiCss3 },
  dart: { Icon: SiDart },
  datadog: { Icon: SiDatadog, regHostname: /^(www.)?datadog.com$/ },
  digitalocean: { Icon: SiDigitalocean },
  docker: { Icon: SiDocker },
  elasticloud: { Icon: SiElasticcloud },
  elasticsearch: { Icon: SiElasticsearch },
  elasticstack: { Icon: SiElasticstack },
  elixir: { Icon: SiElixir },
  eslint: { Icon: SiEslint },
  expodev: { Icon: SiExpo },
  firebase: { Icon: SiFirebase },
  'gcp.bigquery': { Icon: SiGooglecloud },
  'gcp.cloudrun': { Icon: SiGooglecloud },
  'gcp.gce': { Icon: SiGooglecloud },
  'gcp.gcs': { Icon: SiGooglecloud },
  'gcp.gke': { Icon: SiKubernetes },
  'gcp.pubsub': { Icon: SiGooglecloud },
  'gcp.sql': { Icon: SiGooglecloud },
  gcp: { Icon: SiGooglecloud },
  'github.actions': { Icon: SiGithub },
  'github.pages': { Icon: SiGithub },
  github: { Icon: SiGithub, regHostname: /^(www.)?github.com$/ },
  golang: { Icon: SiGo },
  heroku: { Icon: SiHeroku },
  html: { Icon: SiHtml5 },
  influxdb: { Icon: SiInfluxdb },
  javascript: { Icon: SiJavascript },
  jira: { Icon: SiJirasoftware, regHostname: /.atlassian.net$/ },
  kotlin: { Icon: SiKotlin },
  kubernetes: { Icon: SiKubernetes },
  mailchimp: { Icon: SiMailchimp },
  mariadb: { Icon: SiMariadb },
  mongodb: { Icon: SiMongodb },
  mongodbatlas: { Icon: SiMongodb },
  mysql: { Icon: SiMysql },
  netlify: { Icon: SiNetlify, regHostname: /^(www.)?netlify.com$/ },
  newrelic: { Icon: SiNewrelic },
  nodejs: { Icon: SiNodedotjs },
  oraclecloud: { Icon: SiOracle },
  ovh: { Icon: SiOvh },
  php: { Icon: SiPhp },
  pingdom: { Icon: SiPingdom, regHostname: /^(www.)?pingdom.com$/ },
  platformsh: { Icon: SiPlatformdotsh },
  postgresql: { Icon: SiPostgresql },
  powershell: { Icon: SiPowershell },
  python: { Icon: SiPython },
  rabbitmq: { Icon: SiRabbitmq },
  react: { Icon: SiReact },
  redis: { Icon: SiRedis },
  render: { Icon: SiRender },
  ruby: { Icon: SiRuby },
  rust: { Icon: SiRust },
  sentry: { Icon: SiSentry, regHostname: /^(www.)?sentry.com$/ },
  slack: { Icon: SiSlack, regHostname: /^(www.)?slack.com$/ },
  swift: { Icon: SiSwift },
  typescript: { Icon: SiTypescript },
  vercel: { Icon: SiVercel },
  webpack: { Icon: SiWebpack },
  zapier: { Icon: SiZapier, regHostname: /^(www.)?zapier.com$/ },
  zoom: { Icon: SiZoom },
};

export const supportedArray: TechInfo[] = listTech.map((t) => {
  if (t.key in extending) {
    return { ...t, ...extending[t.key] };
  }
  return t;
});

export const supportedIndexed: Record<string, TechInfo> = {};
Object.values(supportedArray).forEach((v) => {
  supportedIndexed[v.key] = v;
});

export const supportedHostname = supportedArray.filter((i) => i.regHostname);

export const supportedTypeToText: Record<TechInfo['type'], string> = {
  api: 'api',
  app: 'application',
  ci: 'ci',
  db: 'database',
  etl: 'etl',
  hosting: 'hosting',
  language: 'language',
  messaging: 'queue',
  network: 'network',
  saas: 'third-party',
  storage: 'storage',
  tool: 'tool',
};

export const internalTypeToText: Record<ApiComponent['type'], string> = {
  service: 'Service',
  api: 'API',
  app: 'Application',
  ci: 'CI',
  db: 'Database',
  etl: 'ETL',
  hosting: 'Hosting',
  language: 'Language',
  messaging: 'Messaging',
  network: 'Network',
  project: 'Project',
  saas: 'Saas',
  storage: 'Storage',
  tool: 'Tool',
};
